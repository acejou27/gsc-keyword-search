name: 🔍 真實 Google 搜索與點擊

on:
  workflow_dispatch:
    inputs:
      search_mode:
        description: '搜索模式'
        required: true
        default: 'csv'
        type: choice
        options:
          - csv
          - manual
      search_query:
        description: '搜索詞 (手動模式)'
        required: false
        default: 'Python 教學'
      target_keywords:
        description: '目標關鍵字 (手動模式，用逗號分隔)'
        required: false
        default: 'Django,Flask'
      max_pages:
        description: '最大搜索頁數'
        required: false
        default: '5'
        type: choice
        options:
          - '3'
          - '5'
          - '10'
      target_domain:
        description: '目標網域 (要點擊的網站)'
        required: false
        default: 'docs.djangoproject.com'
  
  # 隨機執行時間：24小時內執行2-3次
  schedule:
    - cron: '15 3 * * *'   # 每天 03:15 (隨機時間1)
    - cron: '42 11 * * *'  # 每天 11:42 (隨機時間2)  
    - cron: '28 19 * * *'  # 每天 19:28 (隨機時間3)
  
  push:
    paths:
      - 'keywords.csv'

permissions:
  contents: write

jobs:
  # 隨機決定是否執行 (66% 機率執行，實現平均每天2-3次)
  random-check:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.random.outputs.should_run }}
    steps:
      - name: 🎲 隨機決定是否執行
        id: random
        run: |
          # 生成 1-100 的隨機數
          RANDOM_NUM=$((RANDOM % 100 + 1))
          echo "隨機數: $RANDOM_NUM"
          
          # 66% 機率執行 (1-66 執行，67-100 跳過)
          if [ $RANDOM_NUM -le 66 ]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
            echo "✅ 決定執行搜索 (隨機數: $RANDOM_NUM <= 66)"
          else
            echo "should_run=false" >> $GITHUB_OUTPUT
            echo "⏭️ 跳過此次執行 (隨機數: $RANDOM_NUM > 66)"
          fi

  search:
    needs: random-check
    runs-on: ubuntu-latest
    # 只有在隨機檢查通過或手動觸發時才執行
    if: needs.random-check.outputs.should_run == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'push'
    
    steps:
    - name: 📥 檢出代碼
      uses: actions/checkout@v4
    
    - name: 🔧 設置 Node.js 環境
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: 📦 安裝依賴
      run: |
        npm init -y
        npm install puppeteer csv-parser
        
        # 安裝瀏覽器依賴
        sudo apt-get update
        sudo apt-get install -y fonts-noto-cjk
    
    - name: 📁 創建目錄
      run: |
        mkdir -p results reports docs/results docs/reports
    
    - name: ⏰ 隨機延遲開始
      run: |
        # 隨機延遲 0-300 秒 (0-5分鐘)，避免同時執行
        DELAY=$((RANDOM % 300))
        echo "⏰ 隨機延遲 $DELAY 秒後開始執行..."
        sleep $DELAY
    
    - name: 🔍 執行真實 Google 搜索
      run: |
        cat > search.js << 'EOF'
        const puppeteer = require('puppeteer');
        const fs = require('fs').promises;
        const csv = require('csv-parser');
        
        class GoogleSearchBot {
          constructor() {
            this.results = [];
            this.startTime = new Date();
          }
        
          async run() {
            console.log('🚀 開始執行真實 Google 搜索');
            
            try {
              const searchParams = await this.getSearchParameters();
              console.log('📋 搜索參數:', searchParams);
              
              for (const params of searchParams) {
                await this.executeSearch(params);
                // 搜索間隔隨機延遲 30-120 秒
                const delay = Math.floor(Math.random() * 90000) + 30000;
                console.log(`⏰ 等待 ${Math.round(delay/1000)} 秒後執行下一個搜索...`);
                await new Promise(resolve => setTimeout(resolve, delay));
              }
              
              await this.saveResults();
              console.log('✅ 搜索任務完成');
              
            } catch (error) {
              console.error('❌ 搜索任務失敗:', error);
              process.exit(1);
            }
          }
        
          async getSearchParameters() {
            const params = [];
            
            if (process.env.SEARCH_MODE === 'manual' && process.env.SEARCH_QUERY) {
              params.push({
                searchQuery: process.env.SEARCH_QUERY,
                targetKeywords: process.env.TARGET_KEYWORDS.split(',').map(k => k.trim()),
                targetDomain: process.env.TARGET_DOMAIN || '',
                maxPages: parseInt(process.env.MAX_PAGES) || 5
              });
            } else {
              try {
                const csvData = await this.readCSVFile('keywords.csv');
                // 隨機選擇 1-3 個關鍵字組合，避免一次處理太多
                const shuffled = csvData.sort(() => 0.5 - Math.random());
                const selected = shuffled.slice(0, Math.floor(Math.random() * 3) + 1);
                params.push(...selected);
              } catch (error) {
                console.warn('⚠️ 無法讀取 CSV 文件，使用默認參數');
                params.push({
                  searchQuery: 'Python 教學',
                  targetKeywords: ['Django'],
                  targetDomain: process.env.TARGET_DOMAIN || '',
                  maxPages: 3
                });
              }
            }
            
            return params;
          }
        
          async readCSVFile(filePath) {
            const results = [];
            
            return new Promise((resolve, reject) => {
              require('fs').createReadStream(filePath)
                .pipe(csv({ headers: false }))
                .on('data', (row) => {
                  const values = Object.values(row).filter(v => v && v.trim());
                  if (values.length >= 2) {
                    const targetKeyword = values[values.length - 1];
                    const searchKeywords = values.slice(0, -1);
                    
                    searchKeywords.forEach(searchQuery => {
                      results.push({
                        searchQuery: searchQuery.trim(),
                        targetKeywords: [targetKeyword.trim()],
                        targetDomain: process.env.TARGET_DOMAIN || '',
                        maxPages: Math.floor(Math.random() * 3) + 3 // 3-5 頁隨機
                      });
                    });
                  }
                })
                .on('end', () => resolve(results))
                .on('error', reject);
            });
          }
        
          async executeSearch({ searchQuery, targetKeywords, targetDomain, maxPages }) {
            console.log(`🔍 搜索: "${searchQuery}" -> [${targetKeywords.join(', ')}]`);
            
            let browser;
            try {
              browser = await puppeteer.launch({
                headless: 'new',
                args: [
                  '--no-sandbox',
                  '--disable-setuid-sandbox',
                  '--disable-dev-shm-usage',
                  '--disable-gpu',
                  '--no-first-run',
                  '--disable-extensions',
                  '--disable-plugins',
                  '--disable-images',
                  '--disable-javascript',
                  '--user-agent=Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
                ]
              });
        
              const page = await browser.newPage();
              await this.setupPage(page);
              
              const searchResults = await this.performSearch(page, searchQuery, targetKeywords, targetDomain, maxPages);
              
              this.results.push({
                searchQuery,
                targetKeywords,
                targetDomain,
                results: searchResults,
                timestamp: new Date().toISOString(),
                success: true
              });
              
              console.log(`✅ 完成搜索: ${searchQuery}`);
              
            } catch (error) {
              console.error(`❌ 搜索失敗 "${searchQuery}":`, error.message);
              
              this.results.push({
                searchQuery,
                targetKeywords,
                targetDomain,
                error: error.message,
                timestamp: new Date().toISOString(),
                success: false
              });
            } finally {
              if (browser) {
                await browser.close();
              }
            }
          }
        
          async setupPage(page) {
            await page.setViewport({ 
              width: 1366 + Math.floor(Math.random() * 200), 
              height: 768 + Math.floor(Math.random() * 200) 
            });
            
            await page.setExtraHTTPHeaders({
              'Accept-Language': 'zh-TW,zh;q=0.9,en;q=0.8'
            });
            
            await page.evaluateOnNewDocument(() => {
              Object.defineProperty(navigator, 'webdriver', {
                get: () => undefined,
              });
            });
          }
        
          async performSearch(page, searchQuery, targetKeywords, targetDomain, maxPages) {
            const results = {};
            
            targetKeywords.forEach(keyword => {
              results[keyword] = { found: false, clicked: false };
            });
        
            try {
              const searchUrl = `https://www.google.com/search?q=${encodeURIComponent(searchQuery)}&hl=zh-TW&gl=TW`;
              console.log(`  🌐 訪問: ${searchUrl}`);
              
              await page.goto(searchUrl, { 
                waitUntil: 'domcontentloaded',
                timeout: 30000 
              });
        
              if (await this.checkForCaptcha(page)) {
                throw new Error('遇到 Google 驗證碼');
              }
        
              for (let currentPage = 1; currentPage <= maxPages; currentPage++) {
                console.log(`  📄 搜索第 ${currentPage} 頁`);
                
                try {
                  await page.waitForSelector('#search', { timeout: 10000 });
                  
                  await this.humanScroll(page);
                  
                  const pageResults = await this.searchOnPage(page, targetKeywords, targetDomain, currentPage);
                  
                  Object.keys(pageResults).forEach(keyword => {
                    if (pageResults[keyword].found && !results[keyword].found) {
                      results[keyword] = pageResults[keyword];
                    }
                  });
        
                  const allFound = targetKeywords.every(keyword => results[keyword].found);
                  if (allFound) break;
        
                  if (currentPage < maxPages) {
                    const hasNext = await this.goToNextPage(page);
                    if (!hasNext) break;
                  }
                  
                } catch (error) {
                  console.warn(`  ⚠️ 第 ${currentPage} 頁出錯:`, error.message);
                  break;
                }
              }
        
            } catch (error) {
              console.error('搜索執行錯誤:', error);
              throw error;
            }
        
            return results;
          }
        
          async searchOnPage(page, targetKeywords, targetDomain, pageNumber) {
            const results = {};
            
            const searchResults = await page.$$eval('#search .g', (elements) => {
              return elements.map((el, index) => {
                const titleEl = el.querySelector('h3');
                const linkEl = el.querySelector('a');
                const snippetEl = el.querySelector('.VwiC3b, .s3v9rd, .st');
                
                return {
                  position: index + 1,
                  title: titleEl ? titleEl.textContent : '',
                  url: linkEl ? linkEl.href : '',
                  snippet: snippetEl ? snippetEl.textContent : ''
                };
              });
            });
        
            for (const keyword of targetKeywords) {
              results[keyword] = { found: false, clicked: false };
              
              for (const result of searchResults) {
                const searchText = `${result.title} ${result.snippet}`.toLowerCase();
                const urlMatch = targetDomain ? result.url.includes(targetDomain) : true;
                
                if (searchText.includes(keyword.toLowerCase()) && urlMatch) {
                  results[keyword] = {
                    found: true,
                    page: pageNumber,
                    position: result.position,
                    url: result.url,
                    title: result.title,
                    snippet: result.snippet,
                    clicked: false
                  };
                  
                  console.log(`    ✅ 找到 "${keyword}" 在第 ${pageNumber} 頁第 ${result.position} 位`);
                  
                  if (targetDomain && result.url.includes(targetDomain)) {
                    try {
                      console.log(`    🖱️ 嘗試點擊: ${result.title}`);
                      
                      const linkElements = await page.$$('#search .g a');
                      if (linkElements[result.position - 1]) {
                        await page.evaluate((element) => {
                          element.scrollIntoView({ behavior: 'smooth', block: 'center' });
                        }, linkElements[result.position - 1]);
                        
                        await new Promise(resolve => setTimeout(resolve, Math.random() * 3000 + 1000));
                        
                        await linkElements[result.position - 1].click();
                        await page.waitForNavigation({ waitUntil: 'domcontentloaded', timeout: 15000 });
                        
                        await this.simulateUserBehavior(page);
                        
                        results[keyword].clicked = true;
                        console.log(`    ✅ 成功點擊: ${result.url}`);
                        
                        await page.goBack();
                        await page.waitForSelector('#search', { timeout: 10000 });
                      }
                    } catch (clickError) {
                      console.warn(`    ⚠️ 點擊失敗: ${clickError.message}`);
                    }
                  }
                  
                  break;
                }
              }
            }
        
            return results;
          }
        
          async simulateUserBehavior(page) {
            console.log(`    👤 模擬用戶行為...`);
            
            try {
              const scrollTimes = Math.floor(Math.random() * 4) + 2;
              for (let i = 0; i < scrollTimes; i++) {
                const scrollAmount = Math.floor(Math.random() * 600) + 200;
                await page.evaluate((amount) => {
                  window.scrollBy(0, amount);
                }, scrollAmount);
                await new Promise(resolve => setTimeout(resolve, Math.random() * 2000 + 800));
              }
              
              const stayTime = Math.floor(Math.random() * 8000) + 5000;
              console.log(`    ⏰ 停留 ${Math.round(stayTime/1000)} 秒`);
              await new Promise(resolve => setTimeout(resolve, stayTime));
              
            } catch (error) {
              console.warn(`    ⚠️ 模擬行為出錯: ${error.message}`);
            }
          }
        
          async humanScroll(page) {
            const scrollTimes = Math.floor(Math.random() * 2) + 1;
            for (let i = 0; i < scrollTimes; i++) {
              const scrollAmount = Math.floor(Math.random() * 400) + 200;
              await page.evaluate((amount) => {
                window.scrollBy(0, amount);
              }, scrollAmount);
              await new Promise(resolve => setTimeout(resolve, Math.random() * 1500 + 500));
            }
          }
        
          async checkForCaptcha(page) {
            try {
              const captchaSelectors = ['#captcha-form', '.g-recaptcha'];
              for (const selector of captchaSelectors) {
                if (await page.$(selector)) return true;
              }
              const title = await page.title();
              return title.includes('驗證') || title.includes('unusual traffic');
            } catch (error) {
              return false;
            }
          }
        
          async goToNextPage(page) {
            try {
              const nextButton = await page.$('#pnnext');
              if (!nextButton) return false;
        
              await Promise.all([
                page.waitForNavigation({ waitUntil: 'domcontentloaded' }),
                nextButton.click()
              ]);
        
              await new Promise(resolve => setTimeout(resolve, Math.random() * 3000 + 2000));
              return true;
            } catch (error) {
              return false;
            }
          }
        
          async saveResults() {
            const timestamp = new Date().toISOString();
            
            const detailedResults = {
              timestamp: timestamp,
              duration: new Date() - this.startTime,
              totalSearches: this.results.length,
              successfulSearches: this.results.filter(r => r.success).length,
              results: this.results
            };
            
            await fs.writeFile('results/latest.json', JSON.stringify(detailedResults, null, 2));
            await this.generateReport(detailedResults);
            
            await fs.mkdir('docs/results', { recursive: true });
            await fs.mkdir('docs/reports', { recursive: true });
            await fs.writeFile('docs/results/latest.json', JSON.stringify(detailedResults, null, 2));
            
            console.log(`💾 結果已保存`);
          }
        
          async generateReport(data) {
            const html = `<!DOCTYPE html>
        <html lang="zh-TW">
        <head>
            <meta charset="UTF-8">
            <title>真實 Google 搜索報告</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 20px; background: #f5f5f5; }
                .container { max-width: 1000px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; }
                .header { background: #4CAF50; color: white; padding: 25px; border-radius: 8px; text-align: center; margin-bottom: 25px; }
                .stats { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin: 25px 0; }
                .stat { text-align: center; padding: 20px; background: #e8f5e8; border-radius: 8px; }
                .result { border: 1px solid #ddd; margin: 20px 0; padding: 25px; border-radius: 8px; background: #fafafa; }
                .success { border-left: 5px solid #4CAF50; }
                .failed { border-left: 5px solid #f44336; }
                .found { color: #4CAF50; font-weight: bold; }
                .clicked { color: #2196F3; font-weight: bold; }
                .not-found { color: #f44336; }
                a { color: #1976D2; text-decoration: none; }
                .keyword-result { margin: 10px 0; padding: 15px; background: white; border-radius: 5px; }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>🔍 真實 Google 搜索報告</h1>
                    <p>生成時間: ${new Date(data.timestamp).toLocaleString('zh-TW')}</p>
                    <p>⚠️ 此報告記錄真實的 Google 搜索和點擊行為</p>
                </div>
                
                <div class="stats">
                    <div class="stat"><h3>${data.totalSearches}</h3><p>總搜索次數</p></div>
                    <div class="stat"><h3>${data.successfulSearches}</h3><p>成功搜索</p></div>
                    <div class="stat"><h3>${data.totalSearches > 0 ? Math.round((data.successfulSearches / data.totalSearches) * 100) : 0}%</h3><p>成功率</p></div>
                    <div class="stat"><h3>${Math.round(data.duration / 1000)}s</h3><p>執行時間</p></div>
                </div>
                
                <h2>🔍 詳細搜索結果</h2>
                
                ${data.results.map(result => {
                  if (!result.success) {
                    return `<div class="result failed"><h3>❌ ${result.searchQuery}</h3><p><strong>錯誤:</strong> ${result.error}</p></div>`;
                  }
                  
                  return `<div class="result success">
                    <h3>✅ ${result.searchQuery}</h3>
                    <p><strong>搜索時間:</strong> ${new Date(result.timestamp).toLocaleString('zh-TW')}</p>
                    <p><strong>目標網域:</strong> ${result.targetDomain || '未指定'}</p>
                    ${result.targetKeywords.map(keyword => {
                      const keywordResult = result.results[keyword];
                      return `<div class="keyword-result">
                        <h4>${keyword}</h4>
                        ${keywordResult.found ? `
                          <p class="found">✅ 找到 - 第 ${keywordResult.page} 頁第 ${keywordResult.position} 位</p>
                          <p><a href="${keywordResult.url}" target="_blank">${keywordResult.title}</a></p>
                          <p>${keywordResult.snippet}</p>
                          ${keywordResult.clicked ? 
                            '<p class="clicked">🖱️ 已點擊訪問 (將在 GSC 中顯示點擊)</p>' : 
                            '<p>👁️ 僅曝光 (將在 GSC 中顯示曝光)</p>'
                          }
                        ` : '<p class="not-found">❌ 未找到</p>'}
                      </div>`;
                    }).join('')}
                  </div>`;
                }).join('')}
                
                <div style="text-align: center; margin-top: 40px; padding: 20px; background: #fff3cd; border-radius: 8px;">
                    <h3>📊 Google Search Console 影響</h3>
                    <p>此次搜索將在您的 Google Search Console 中產生真實數據</p>
                </div>
            </div>
        </body>
        </html>`;
            
            await fs.writeFile('reports/latest-report.html', html);
            await fs.writeFile('docs/reports/latest-report.html', html);
          }
        }
        
        const bot = new GoogleSearchBot();
        bot.run();
        EOF
        
        node search.js
      env:
        SEARCH_MODE: ${{ github.event.inputs.search_mode || 'csv' }}
        SEARCH_QUERY: ${{ github.event.inputs.search_query }}
        TARGET_KEYWORDS: ${{ github.event.inputs.target_keywords }}
        MAX_PAGES: ${{ github.event.inputs.max_pages || '5' }}
        TARGET_DOMAIN: ${{ github.event.inputs.target_domain }}
    
    - name: 📤 提交結果
      if: success()
      run: |
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        
        git add results/ reports/ docs/
        
        if ! git diff --staged --quiet; then
          git commit -m "🔍 真實搜索結果 - $(date '+%Y-%m-%d %H:%M:%S')

🤖 自動執行 | 👤 ${{ github.actor }} | 🔢 #${{ github.run_number }}
📊 模式: ${{ github.event.inputs.search_mode || 'csv' }}
🌐 目標: ${{ github.event.inputs.target_domain || '從CSV讀取' }}"
          git push
          echo "✅ 結果已提交"
        fi
    
    - name: 📊 執行摘要
      if: success()
      run: |
        echo "## 🎉 真實 Google 搜索完成！" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ⚠️ 重要說明" >> $GITHUB_STEP_SUMMARY
        echo "此次執行了**真實的 Google 搜索和點擊**，將在 GSC 中產生真實數據" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔗 查看結果" >> $GITHUB_STEP_SUMMARY
        echo "- 🌐 [在線查看](https://acejou27.github.io/gsc-keyword-search/)" >> $GITHUB_STEP_SUMMARY
        echo "- 📊 [詳細報告](https://acejou27.github.io/gsc-keyword-search/reports/latest-report.html)" >> $GITHUB_STEP_SUMMARY
        echo "- 📈 [Google Search Console](https://search.google.com/search-console)" >> $GITHUB_STEP_SUMMARY